<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_424426_atf.CatalogItemUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>CatalogItemUtil</name>
        <script><![CDATA[var CatalogItemUtil = Class.create();
CatalogItemUtil.prototype = {
	initialize: function () {
		
	},
	
	generateCollectionVariableStepDescription: function (variableName, variableValue) {
		if (variableName) {
			const variableGr = variableName.getRefRecord();
			if (variableGr.isValidRecord() && variableValue) {
				const listTable = variableGr.list_table.toString();
				const displayValues = [];
				const variableValues = variableValue.split(',');
				for (let i = 0; i < variableValues.length; i++) {
					const value = variableValues[i].trim();
					if (value.startsWith('{{') && value.endsWith('}}')) {
						displayValues.push('{{Parameters' + value.substr(value.indexOf('.')).replace(/\./g, '->'));
					} else {
						const valueGr = new GlideRecord(listTable);
						valueGr.addQuery('sys_id', value);
						valueGr.setLimit(1);
						valueGr.query();
						if (valueGr.next()) {
							displayValues.push(valueGr.getDisplayValue());
						} else {
							return 'Invalid Config: No record with sys_id=' + value + ' in table ' + listTable + ' found!';
						}
					}
				}
				
				if (displayValues.length) {
					return "Set the Value of '" + variableGr.name + "' to '" + displayValues.join(', ') + "'";
				}
			}
			
			return gs.getMessage("Invalid Config: No 'Name' or 'Value' set");
		}
		
		return '';
	},
	
	getCatalogItemVariablesRefQual: function (catalogItemSysID) {
		if (catalogItemSysID) {
			let mrvsGr = new GlideRecord('io_set_item');
			mrvsGr.addQuery('sc_cat_item', catalogItemSysID);
			mrvsGr.query();

			let mrvs = [];
			while (mrvsGr.next()) {
				mrvs.push(mrvsGr.getUniqueValue());
			}

			const listCollectorVariableType = 21;
			let variableGr = new GlideRecord('item_option_new');
			variableGr.addQuery('active', true);
			variableGr.addQuery('type', listCollectorVariableType);
			variableGr.addQuery('cat_item', catalogItemSysID)
				.addOrCondition('variable_set', 'IN', mrvs);
			return variableGr.getEncodedQuery();
		}
		
		return 'sys_id=x';
	},
	
    type: 'CatalogItemUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-05-23 21:03:47</sys_created_on>
        <sys_id>29d26fa097432110d70ef207f053aff2</sys_id>
        <sys_mod_count>22</sys_mod_count>
        <sys_name>CatalogItemUtil</sys_name>
        <sys_package display_value="ATF+" source="x_424426_atf">02dbdb2497032110d70ef207f053af3d</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ATF+">02dbdb2497032110d70ef207f053af3d</sys_scope>
        <sys_update_name>sys_script_include_29d26fa097432110d70ef207f053aff2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-07-10 15:45:40</sys_updated_on>
    </sys_script_include>
</record_update>
